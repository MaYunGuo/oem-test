<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE >ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出；可以设置成OFF(关闭)或Error(只输出错误信息)-->

<!--monitorInterval：Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔秒数-->

<Configuration status="WARN" monitorInterval="30">
    <Properties>
         <!-- 缺省配置（用于开发环境），配置日志文件输出目录和动态参数。其他环境需要在VM参数中指定；
          “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值 -->
          <Property name="log.dir">/opt/oem_jn/log</Property>
          <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] %m%n</Property>
    </Properties>
        <!-- 定义所有的appender -->
    <Appenders>
         <!--这个输出控制台的配置-->
         <Console name="Console" target="SYSTEM_OUT">
           <!--输出日志的格式-->
            <PatternLayout pattern="${pattern}" />
         </Console>

          <!-- info及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
         <RollingFile  name="infoLog" fileName="${log.dir}/info.log" filePattern="${log.dir}/info%d{yyyy-MM-dd}.log">
              <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
              <Filters>
                  <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
              </Filters>
              <PatternLayout pattern="${pattern}"/>
              <Policies>
                  <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour -->
                  <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                  <!-- 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
                  <!-- DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性) -->
              </Policies>
         </RollingFile>

         <!-- warn级别的日志信息 -->
         <RollingFile  name="warnLog" fileName="${log.dir}/warn.log" filePattern="${log.dir}/warn%d{yyyy-MM-dd}.log">
             <Filters>
                 <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
             </Filters>
             <PatternLayout pattern="${pattern}" />
             <Policies>
                 <TimeBasedTriggeringPolicy interval="1" modulate="true" />
             </Policies>
         </RollingFile>

         <!-- error级别的日志信息 -->
         <RollingFile name="errorLog" fileName="${log.dir}/error.log" filePattern="${log.dir}/error%d{yyyy-MM-dd}.log">
             <Filters>
                 <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
             </Filters>
             <PatternLayout  pattern="${pattern}" />
             <Policies>
                 <TimeBasedTriggeringPolicy interval="1" modulate="true" />
             </Policies>
         </RollingFile>
    </Appenders>

        <!-- 全局配置，默认所有的Logger都继承此配置 -->
        <!-- 用来配置LoggerConfig，包含一个root logger和若干个普通logger。
        additivity指定是否同时输出log到父类的appender，缺省为true。
        一个Logger可以绑定多个不同的Appender。只有定义了logger并引入的appender，appender才会生效。 -->
    <Loggers> <!-- 第三方的软件日志级别 -->
        <logger name="org.springframework" level="info" additivity="true">
             <AppenderRef ref="Console"/>
        </logger>

        <!-- root logger 配置 -->
        <Root level="info" includeLocation="true">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="infoLog"/>
            <AppenderRef ref="warnLog"/>
            <AppenderRef ref="errorLog"/>
        </Root>
    </Loggers>
</Configuration>